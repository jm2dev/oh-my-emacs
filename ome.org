#+TITLE: Oh My Emacs
#+OPTIONS: toc:2 num:nil ^:nil

#+BEGIN_QUOTE
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+END_QUOTE

* Prerequisites
** Mandatory
The following software is really basic that almost every el-get package will
need one of them.

- [[http://savannah.nongnu.org/projects/cvs][cvs]]
- [[http://mercurial.selenic.com/][mercurial]]
- [[http://git-scm.com/][git]]
- [[http://www.gnu.org/software/make/][make]]
- [[http://www.gnu.org/software/texinfo/][texinfo]]
- [[http://gcc.gnu.org/][gcc]]
- [[http://www.gnu.org/software/automake/][automake]]
- [[http://www.gnu.org/software/autoconf/][autoconf]]

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

This dotemacs project aims to provide an out-of-the-box emacs configuration
for writing and programming. It is intended for both beginners and
intermediate users. The name of this project is inspired by [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]], which is
another out-of-the-box configuration for [[http://www.zsh.org/][zsh]].

The main features of oh-my-emacs are
- better default settings
- focus on writing and programming, let emacs do what it really good at
- "literate" customization embedded in Org-mode files
- use el-get to manage packages, which is portable, and version control
  friendly
- self-adapting, enable features only when the system meet the requirements

The latest version is at https://github.com/xiaohanyu/oh-my-emacs.

** Learning Emacs
   :PROPERTIES:
   :CUSTOM_ID: learning
   :END:
This project won't teach you anything about how to use emacs or why use
emacs. However, I'll give you some useful resources if you're new to emacs.

The first thing you should refer to is the emacs builtin tutorial, type =C-h
t= to get it within a running emacs.

Next, you should refer to some general books to get a full view of emacs,
just search http://www.amazon.com.

Now you should be a intermediate emacs user(or lover, I hope), the final step
is emacs lisp, which is not that easy as it looks like, since it is not easy to
get a full understanding of the so-called lisp. But you can still do something
useful even if you didn't know lisp quite a lot. The builtin [[https://www.gnu.org/software/emacs/manual/html_node/eintr/][An Introduction to
Programming in Emacs Lisp]] is a really good entry point to emacs lisp
programming. You can refer to this tutorial by typing =C-h i m Emacs Lisp
Intro=.

Finally, if you want to do some big jobs in emacs lisp, then there's a long
adventure waiting for you. The builtin [[http://www.gnu.org/software/emacs/manual/][GNU Emacs Manual]] and [[http://www.gnu.org/software/emacs/manual/html_node/elisp/][GNU Emacs Lisp
Reference Manual]] is your best friends. Besides these two large books, there're
various good web sites, such as
- [[http://www.emacswiki.org/][emacswiki]] :: the largest unofficial emacs lisp repository
- [[http://wikemacs.org/index.php/Main_Page][wikiemacs]] :: a saner and modern wiki for emacs
- [[http://www.masteringemacs.org/][masteringemacs]] :: a blog about mastering the world's best text editor
- [[http://emacs-fu.blogspot.com/][emacs-fu]] :: useful tricks for emacs
- [[http://alexott.net/en/emacs/][Alexott's Blog]] :: some really great articles about emacs
- [[http://alexott.net/en/emacs/][emacser]] :: an excellent and comprehensive emacs blog written by Chinese
             users.


Wow, what a long journey, if you're tired, you can [[http://emacsrocks.com/][rock with emacs]].

** Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:

1. Install Emacs version 24 or greater.  Use your package manager if
   you have one and it has an install candidate for Emacs 24,
   otherwise install it directly [[http://savannah.gnu.org/projects/emacs/][from source]], or Mac binaries may be
   downloaded from the /nightlies/ section of
   http://emacsformacosx.com/builds
2. Checkout a version of the oh-my-emacs using git -- if you're new to
   git, checkout this [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html][git-tutorial]].
#+BEGIN_SRC sh
  git clone http://github.com/xiaohanyu/oh-my-emacs.git
#+END_SRC
3. Move the resulting directory to =~/.emacs.d= [1]
4. Launch Emacs!


** Package Management
#+BEGIN_QUOTE
Let's face it -- although a vanilla Emacs installation is quite powerful almost
nobody is using Emacs without a pile of add-ons. And managing those add-ons is
quite frankly a pain in the ass. Traditional options included installing Emacs
add-ons via the operating system's package manager (if available), downloading
.el files from various locations (everybody hates packages distributed only on
Emacs Wiki with no canonical version control repo) and simply sticking them on
the load-path, etc. It's more than obvious that such solutions are less than
ideal.

For instance if you're installing Emacs add-ons via a package manager and you
have to change OSes (or machines) you're mostly fucked. On the other hand
piling files manually in .emacs.d is equal to hell in the version and
dependency tracking department. There has to be a better way, right? Wouldn't
it be nice if Emacs had its own package manager similar to the likes of
homebrew, apt or yum?

Emacs 24 finally introduces such a tool -- its name is package.el (very
original, right?) and it's promise is to make your lives a bit easier. Does it
manage to deliver on that promise? We'll see that in a bit...

-- [[http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/][Package Management in Emacs: The Good, the Bad and the Ugly]]
#+END_QUOTE

Ah, a long long quote, really vivid and visual description of the state of
emacs package management system. [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]] adopt [[https://github.com/dimitri/el-get][el-get]], while other popular
dotemacs project adopt the builtin =package.el=. You may wonder why, IMHO,
=package.el= is far from ideal, although it is builtin with emacs, however,
el-get is the practical solution, at least for now. In a word, what el-get
to emacs is what =apt-get= to debian/ubuntu.

So the first thing oh-my-emacs do to your emacs is to install =el-get=:

#+NAME: ome-install-el-get
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (let (el-get-master-branch)
        (goto-char (point-max))
        (eval-print-last-sexp))))

  ;; (el-get 'sync)
#+END_SRC

And in the following journey, you may find the great power =el-get= provides
for you -- which makes it possible to store just dotemacs configuration, no
need to things like =git submodule=. Thank you, [[http://tapoueh.org/][Dimitri Fontaine]].

** Cl-lib
   :PROPERTIES:
   :CUSTOM_ID: cl-lib
   :END:

[[http://www.gnu.org/software/emacs/news/NEWS.24.3][Emacs 24.3]] renamed the Common Lisp emulation package from =cl= to =cl-lib=,
which causes some madness between different Emacs versions. The following hack
code has been tested on Emacs 24.2.1 and Emacs 24.3.50. Any bug report will be
appreciated.

#+NAME: cl-lib
#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "24.3")
    (el-get 'sync '(cl-lib))
    (add-to-list 'load-path "~/.emacs.d/el-get/cl-lib"))
#+END_SRC

** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
The =init.el= file is where everything begins. It is loaded
automatically by Emacs on startup, its sole purpose is to load the
elisp code embedded in this file.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

** oh-my-emacs basics
- Functions for loading other parts of oh-my-emacs.

#+NAME: ome-load
#+BEGIN_SRC emacs-lisp
  (setq ome-packages nil)

  (defun ome-load (file &optional header-or-tag)
    "Load configuration from other ome-*.org files.
  If the optional argument is the id of a subtree then only
  configuration from within that subtree will be loaded.  If it is
  not an id then it will be interpreted as a tag, and only subtrees
  marked with the given tag will be loaded.

  For example, to load all of ome-lisp.org simply
  add (ome-load \"lisp\") to your configuration.

  To load only the 'window-system' config from
  ome-misc-recommended.org add
   (ome-load \"misc-recommended\" \"window-system\")
  to your configuration."
    (let ((file (expand-file-name (if (string-match "ome-.+\.org" file)
                                      file
                                    (format "ome-%s.org" file))
                                  ome-dir)))
      ;; ensure el-get-sources is empty before loading "ome-.+\.org" files
      (setq el-get-sources nil)
      (org-babel-load-file
       (if header-or-tag
           (let* ((base (file-name-nondirectory file))
                  (dir  (file-name-directory file))
                  (partial-file (expand-file-name
                                 (concat "." (file-name-sans-extension base)
                                         ".part." header-or-tag ".org")
                                 dir)))
             (unless (file-exists-p partial-file)
               (with-temp-file partial-file
                 (insert
                  (with-temp-buffer
                    (insert-file-contents file)
                    (save-excursion
                      (condition-case nil ;; collect as a header
                          (progn
                            (org-link-search (concat"#"header-or-tag))
                            (org-narrow-to-subtree)
                            (buffer-string))
                        (error ;; collect all entries with as tags
                         (let (body)
                           (org-map-entries
                            (lambda ()
                              (save-restriction
                                (org-narrow-to-subtree)
                                (setq body (concat body "\n" (buffer-string)))))
                            header-or-tag)
                           body))))))))
             partial-file)
         file))
      (el-get 'sync (mapcar 'el-get-source-name el-get-sources))
      (mapcar (lambda (el-get-package)
                (add-to-list 'ome-packages
                             (el-get-source-name el-get-package)))
              el-get-sources)))

#+END_SRC

- Functions for getting information about el-get packages installed by
  oh-my-emacs.
#+NAME: ome-packages
#+BEGIN_SRC emacs-lisp
  (defun ome-try-get-package-website (package)
    "el-get's package recipe has multiple type, some contains
  a :website, some contains just a :url, while some github package
  just contains a :pkgname. This function try to get a proper
  website link for an el-get package."
    (let ((package-def (el-get-package-def package)))
      (or (plist-get package-def :website)
          (and (eq (plist-get package-def :type) 'github)
               (concat "https://github.com/"
                       (plist-get package-def :pkgname)))
          (plist-get package-def :url))))

  (defun ome-package-list (ome-packages)
    "Get a whole list of el-get packages installed by
  oh-my-emacs. Returns a list of (package-name, package-website,
  package-description)."
    (mapcar
     (lambda (package)
       (let ((package-def (el-get-package-def package)))
         (list (ome-try-get-package-website package)
               (el-get-package-name package)
               ;; some package's description has multiple lines, so we need to
               ;; join them together for better auto-fill.
               (replace-regexp-in-string "\\(\n\\|\\ \\)+" " "
                                         (plist-get package-def :description)))))
     (sort ome-packages #'string<)))

  (defun ome-package-list-in-org-format (ome-packages)
    "A convenient function for constructing oh-my-emacs's
  README.org file."
    (mapcar
     (lambda (ome-package)
       (format "[[%s][%s]]: %s"
               (nth 0 ome-package)
               (nth 1 ome-package)
               (nth 2 ome-package)))
     (ome-package-list ome-packages)))

  (defun ome-insert-package-list-in-org-mode ()
    "Insert all packages info to current `org-mode' files.

  This still has some problems with `org-mode' and `auto-fill-mode'."
    (interactive)
    (insert
     (with-temp-buffer
       (loop for package
             in (ome-package-list-in-org-format ome-packages)
             do (insert "- " package "\n\n"))
       (fill-region (point-min) (point-max))
       (replace-string "-\n " "-" nil (point-min) (point-max))
       (flush-lines "^$" (point-min) (point-max))
       (buffer-string))))
#+END_SRC


** oh-my-emacs core functions
   :PROPERTIES:
   :CUSTOM_ID: core
   :END:

#+NAME: core
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name cl-lib))

  (defun ome-start-or-switch-to (function buffer-name)
    "Invoke FUNCTION if there is no buffer with BUFFER-NAME.
    Otherwise switch to the buffer named BUFFER-NAME.  Don't clobber
    the current buffer."
    (if (not (get-buffer buffer-name))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (funcall function))
      (switch-to-buffer-other-window buffer-name)))
#+END_SRC

* Load settings

Till now, Oh-my-emacs includes:
- [[file:ome-gui.org][ome-gui.org]]: settings for color theme, font, modeline, scrollbar, etc.
- [[file:ome-basic.org][ome-basic.org]]: basic settings, such as tab, space, auto-fill-mode, flyspell,
  etc.
- [[file:ome-miscs.org][ome-miscs.org]]: misc settings such as =magit=, =smartparens=, =projectile=,
  etc.
- [[file:ome-completion.org][ome-completion.org]]: main settings for completion support.
- [[file:ome-keybindings.org][ome-keybindings.org]]: oh-my-emacs keybindings.
- [[file:ome-org.org][ome-org.org]]: some refinement for org-mode.
- [[file:ome-advanced.org][ome-advanced.org]]: only contains =evil=.
- [[file:ome-writing.org][ome-writing.org]]: for writers, bloggers, only contains =markdown-mode= for
  now.
- [[file:ome-cc.org][ome-cc.org]]: main settings for =cc-mode=.
- [[file:ome-lisp.org][ome-lisp.org]]: ah, settings for lisp dialects, including emacs lisp, common
  lisp, scheme and clojure.
- [[file:ome-python.org][ome-python.org]]: python settings, life is short, =elpy= is amazing.
- [[file:ome-auto-mode.org][ome-auto-mode.org]]: small and convenient settings for some minor mode package.
- [[file:ome-tex.org][ome-tex.org]]: AUCTeX and CDLaTeX for \TeX{} editing.

#+NAME: load various ome files
#+BEGIN_SRC emacs-lisp
  (ome-load "ome-gui.org")
  (ome-load "ome-basic.org")
  (ome-load "ome-miscs.org")
  (ome-load "ome-completion.org")
  (ome-load "ome-keybindings.org")
  (ome-load "ome-org.org")
  (ome-load "ome-writing.org")
  (ome-load "ome-cc.org")
  (ome-load "ome-lisp.org")
  (ome-load "ome-python.org")
  (ome-load "ome-auto-mode.org")
  (ome-load "ome-tex.org")
#+END_SRC

** Load User/System Specific Files
*** System/User specific customizations
You can keep system- or user-specific customizations here in either raw
emacs-lisp files or as embedded elisp in org-mode files (as done in this
document).

You can keep elisp source in the =src= directory.  Packages loaded from here
will override those installed by ELPA.  This is useful if you want to track the
development versions of a project, or if a project is not in elpa.

After we've loaded all the oh-my-emacs defaults, lets load the User's stuff.
#+NAME: ome-load-files
#+BEGIN_SRC emacs-lisp
  (flet ((sk-load (base)
           (let* ((path          (expand-file-name base ome-dir))
                  (literate      (concat path ".org"))
                  (encrypted-org (concat path ".org.gpg"))
                  (plain         (concat path ".el"))
                  (encrypted-el  (concat path ".el.gpg")))
             (cond
              ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
              ((file-exists-p encrypted-el)  (load encrypted-el))
              ((file-exists-p literate)      (org-babel-load-file literate))
              ((file-exists-p plain)         (load plain)))))
         (remove-extension (name)
           (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
           (match-string 1 name)))
    (let ((elisp-dir (expand-file-name "src" ome-dir))
          (user-dir (expand-file-name user-login-name ome-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path)))
      ;; load system-specific config
      (sk-load system-name)
      ;; load user-specific config
      (sk-load user-login-name)
      ;; load any files in the user's directory
      (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))))
#+END_SRC

*** Settings from M-x customize
#+NAME: m-x-customize-customizations
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat ome-dir "custom.el"))
  (load custom-file 'noerror)
#+END_SRC


* Todo

** Blueprint
- Refactor the codebase, just like [[https://github.com/bbatsov/prelude][prelude]], oh-my-emacs should classify its
  files to "core" and "modules", or something like this. "core" is the
  foundation of oh-my-emacs, which must be loaded by default at startup, while
  "modules" contains optional files which can be loaded when necessary.
- Turn the "Prerequisites" section into a more feasible "Prerequisites
  Matrix", by which, I mean, the header row tags the operating system, while
  the first column tags the mandatory/optional softwares, and the body
  contains the concrete command to specify how to install software A, B, C in
  operating system X, Y, Z.
- Show all =ome-packages= by group instead by alphabetic order, which is
  better for users to know what oh-my-emacs provide for them and how awesome
  oh-my-emacs is. :-)
- Add functions to rollback el-get. For example, users may have different
  environments, which may result in a failure of one oh-my-emacs module A. Thus
  users may want to remove all the packages installed by module A. So maybe I
  need a function =(ome-unload "ome-module-A.org")=, which just remove all
  oh-my-emacs by calling =el-get-remove=, and rollback the user's .emacs.d to
  a previous workable state(hope).

** Boot up speed optimization
- Use =eval-after-load= when possible to improve the boot up speed.
- =autoload= for lazy loading?

** El-get
- Documentation work about why choosing =el-get= over the builtin =package.el=
  with =melpa= in doc.
- Investigate whether or not =el-get-remove= will remove all packages that
  depends on the removed package, if not, how to solve this problem?
- Investigate more on =el-get= to know how to reinitialize a package without
  need to =el-get-remove= then =el-get-install= if just =:after= changes a
  little. This is really a big problem.
- Seems that you can write =depends= in ome =el-get-sources=, why?
- When you =el-get-update=, =el-get= will first =el-get-remove= then
  =el-get-install=, any way to just do things like =git pull= instead of =git
  clone= from the beginning?

** Writing Portable Emacs Lisp Configurations
- Use =executable-find= to set path to external tools instead of by writing the
  tool full path by hand.
- Check necessary external tools before require a package if a package do need
  that tool.
- Try your best to avoid binding keys to function keys since some function keys
  are easy be conflicted with system keys, and some keyboard do not have
  function keys at all, such as HHKB.
- Narrow you variable definition scope, for example, use =define-key= with a
  mode map instead of =global-set-key=, and you'd better set mode related keys
  within the mode hook.
- Try to use system tools to get necessary configuration, for example, you can
  use =pkg-config= to get necessary header file paths for a particular lib,
  this is useful for settings with =auto-complete-clang=.
- Emacs cannot do all things, it do need some external tools to facilitate its
  jobs. For example, =semantic= from =cedet= is a bad idea, it's bloated, slow
  and buggy. Consider using clang/jedi for completion. If there is a better
  external tools, do not hesitate, just use it. Do not reinvent the same wheel
  in emacs lisp, all you need to do is integrate that tool to emacs with an emacs
  interface.

* Footnotes
[1] If you already have a directory at =~/.emacs.d= move it out of the way and
put this there instead. Or you can make a symbolic link.
