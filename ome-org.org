#+TITLE: Oh My Emacs Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: org-el-get-packages
  :END:

#+NAME: org-el-get-packages
#+CAPTION: El-get packages for ome-org module
|            | Status      | Description                      |
|------------+-------------+----------------------------------|
| [[http://www.emacswiki.org/emacs/Htmlize][htmlize]].el | Recommended | Export an buffer to html format. |
| [[http://staff.science.uva.nl/~dominik/Tools/cdlatex/][CDLaTeX]]    | Recommended | Speedy \LaTeX{} input.           |


* Keybindings
  :PROPERTIES:
  :CUSTOM_ID: keybindings
  :END:

#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+END_SRC

* Speed keys
  :PROPERTIES:
  :CUSTOM_ID: speed-keys
  :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+NAME: speed-keys
#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

* Code blocks
  :PROPERTIES:
  :CUSTOM_ID: babel
  :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+NAME: babel
#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Code block fontification
  :PROPERTIES:
  :CUSTOM_ID: code-block-fontification
  :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

#+NAME: code-block-fontification
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

* The Library of Babel
  :PROPERTIES:
  :CUSTOM_ID: library-of-babel
  :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

* Htmlize
  :PROPERTIES:
  :CUSTOM_ID: htmlize
  :END:

[[http://www.emacswiki.org/emacs/Htmlize][htmlize.el]] is a package for exporting the contents of an Emacs buffer to HTML
while respecting display properties such as colors, fonts, underlining,
invisibility, etc.

Org-mode can utilize =htmlize= when =org-export-as-html= for source code syntax
highlighting if =htmlize= is available.

However, there's a minor problem with oh-my-emacs's default settings of
=rainbow-delimiters-mode=. Functions such as =htmlize-buffer= will report an
error: =htmlize-make-face-map: Wrong type argument: listp,
"rainbow-delimiters-depth-1-face"=, so I do a small hack to overcome this by
using the elisp's =defadvice= utility.

Actually, =rainbow-delimiters-mode= still has some problems within org-mode's
code block, which may be a bug of =rainbow-delimiters-mode=.

#+NAME: htmlize
#+BEGIN_SRC emacs-lisp
  (defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
    (rainbow-delimiters-mode -1)
    ad-do-it
    (rainbow-delimiters-mode t))

  (defun ome-htmlize-setup ()
    (if (el-get-read-package-status 'rainbow-delimiters)
        (progn
          (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
          (ad-activate 'htmlize-buffer-1))))

  (add-to-list 'el-get-sources
               '(:name htmlize
                       :after (progn
                                (ome-htmlize-setup))))
#+END_SRC
* Org-CDLaTeX
  :PROPERTIES:
  :CUSTOM_ID: org-latex
  :END:

If [[http://staff.science.uva.nl/~dominik/Tools/cdlatex/][CDLaTeX]] is available, turn on it in org-mode. See "[[http://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html][Using CDLaTeX to enter
math]]" for details.

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
  (when (el-get-package-is-installed 'cdlatex-mode)
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+END_SRC

* Todo
- How to handle =org-mode= format like ===?
