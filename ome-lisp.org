#+TITLE: Oh My Emacs Lisps
#+OPTIONS: toc:2 num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some settings for lisp dialects including [[* Emacs Lisp][Emacs Lisp]], [[* Scheme][Scheme]], [[* Common Lisp][Common Lisp]], and [[* Clojure][Clojure]].

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: lisp-prerequisites
  :END:

#+NAME: lisp-prerequisites
#+CAPTION: Prerequisites for ome-lisp module
|            | Windows | Ubuntu/Debian/Mint | ArchLinux | Fedora | Mac OS X | Mandatory? |
|------------+---------+--------------------+-----------+--------+----------+------------|
| [[http://www.sbcl.org/][SBCL]]       |         | sbcl               |           |        |          | Yes        |
| [[http://ccl.clozure.com/][Clozure CL]] |         | [web]              |           |        |          | No         |
| [[http://www.clisp.org/][CLISP]]      |         | clisp              |           |        |          | No         |
| [[http://www.gnu.org/software/guile/][Guile]]      |         | guile-2.0          |           |        |          | Yes        |
| [[http://racket-lang.org/][Racket]]     |         | racket             |           |        |          | No         |
| [[http://leiningen.org/][Leiningen]]  | [web]   | [web]              | [web]     | [web]  | [web]    | Yes        |

Note:
- [[http://www.sbcl.org/][SBCL]] or [[http://ccl.clozure.com/][Clozure CL]] or [[http://www.clisp.org/][CLISP]] as a Common Lisp implementation. I recommend
  SBCL since it has good performance, and is easy to install via package
  manager.
- [[http://www.gnu.org/software/guile/][Guile]] or [[http://racket-lang.org/][Racket]] as a Scheme implementation. Geiser requires Guile >= 2.0.
- [[http://leiningen.org/][Leiningen]] for Clojure. I recommend you install leiningen from the official
  website to keep update with the lastest version.

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: lisp-el-get-packages
  :END:

#+NAME: gui-el-get-packages
#+CAPTION: El-get packages for ome-lisp module
|                 | Status   | Description                                    |
|-----------------+----------+------------------------------------------------|
| [[https://github.com/purcell/elisp-slime-nav][elisp-slime-nav]] | Required | Shortcuts for browsing elisp code.             |
| [[http://common-lisp.net/project/slime/][slime]]           | Required | One of the most amazing package for Emacs.     |
| [[https://github.com/purcell/ac-slime][ac-slime]]        | Required | AC backend for slime.                          |
| [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]    | Required | Major mode for Clojure.                        |
| [[https://github.com/clojure-emacs/nrepl.el][nrepl.el]]        | Required | Nrepl to Clojure is what slime to Common Lisp. |
| [[https://github.com/purcell/ac-nrepl.git][ac-nrepl]]        | Required | AC backend for nrepl.                          |
| [[http://www.nongnu.org/geiser/][geiser]]          | Required | Geiser to Scheme is what slime to Common Lisp. |

* Basics
  :PROPERTIES:
  :CUSTOM_ID: basic-lisp
  :END:

This section contains some basic settings which is common to all lisp modes.

#+NAME: basic-lisp
#+BEGIN_SRC emacs-lisp
  (defvar ome-lisp-modes '(emacs-lisp-mode
                           inferior-emacs-lisp-mode
                           lisp-interaction-mode
                           scheme-mode
                           lisp-mode
                           eshell-mode
                           slime-repl-mode
                           nrepl-mode
                           clojure-mode
                           common-lisp-mode)
    "List of Lisp modes.")
#+END_SRC

* Emacs Lisp
  :PROPERTIES:
  :CUSTOM_ID: emacs-lisp
  :END:

Emacs is really a great "IDE" for developing Elisp programs. This section
contains some goodies for elisp development.

[[https://github.com/purcell/elisp-slime-nav][elisp-slime-nav]] provide some slime-like shortcuts to find function/variable
definitions, which is useful when you want to know the details, as you know,
there's no secret with source code. But the default shortcuts for
=elisp-slime-nav-find-elisp-thing-at-point= has conflicts with =evil-mode=,
which is enabled by default by oh-my-emacs, I still didn't figure out a good
way to solve this, so any help will be appreciated.

#+NAME: emacs-lisp
#+BEGIN_SRC emacs-lisp
  (defun ome-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

  (add-hook 'emacs-lisp-mode-hook 'ome-remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)

  (defun ome-elisp-slime-nav-setup ()
    ;; (defun ome-elisp-slime-nav-keybindings-in-evil ()
    ;;   (if (and (boundp 'evil-mode) evil-mode)
    ;;       (progn (define-key elisp-slime-nav-mode-map (kbd "C-c C-d .")
    ;;                'elisp-slime-nav-find-elisp-thing-at-point)
    ;;              (define-key elisp-slime-nav-mode-map (kbd "C-c C-d ,")
    ;;                'pop-tag-mark))))
    (dolist (hook '(emacs-lisp-mode-hook
                    lisp-interaction-mode-hook
                    ielm-mode-hook
                    eshell-mode-hook))
      (add-hook hook 'turn-on-elisp-slime-nav-mode)))
      ;; (add-hook hook 'ome-elisp-slime-nav-keybindings-in-evil)))

  (add-to-list 'el-get-sources
               '(:name elisp-slime-nav
                       :after (progn
                                (ome-elisp-slime-nav-setup))))
#+END_SRC

** IELM
   :PROPERTIES:
   :CUSTOM_ID: ielm
   :END:

[[http://www.emacswiki.org/emacs/InferiorEmacsLispMode][IELM]] is an alternative to Lisp Interactive mode, you can treat IELM as [[http://emacs-fu.blogspot.com/2011/03/ielm-repl-for-emacs.html][a REPL
for emacs]]. Though convenient, IELM lacks some import features to be a real
REPL, such as =python-shell-send-defun= in Emacs 24.3 builtin python mode.

#+NAME: emacs-lisp
#+BEGIN_SRC emacs-lisp
  (defun ome-visit-ielm ()
    "Switch to default `ielm' buffer.
  Start `ielm' if it's not already running."
    (interactive)
    (ome-start-or-switch-to 'ielm "*ielm*"))

  (define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ome-visit-ielm)
  (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  (add-hook 'ielm-mode-hook 'ac-emacs-lisp-mode-setup)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

** Eshell
   :PROPERTIES:
   :CUSTOM_ID: eshell
   :END:

I think you can treat [[http://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] as a combination of traditional Unix shell and
IELM. Eshell is a command shell written in Emacs Lisp, which means it's as
portable as Emacs itself. In fact, Eshell replicates most of the features and
commands from GNU CoreUtils and the Bourne-like shells, thus Eshell will
function identically on any environment Emacs itself runs on.

To your surprise, Eshell does not inherit from =comint-mode=, which means that
hooks and routines for =comint-mode= won't work for Eshell. For more details
about how to mastering eshell, see [[http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/][MASTERING ESHELL]].

#+NAME: eshell
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'ac-sources 'ac-source-pcomplete)))

  (add-to-list 'ac-modes 'eshell-mode)
  (add-hook 'eshell-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'eshell-mode-hook 'ac-emacs-lisp-mode-setup)
#+END_SRC
* Common Lisp
  :PROPERTIES:
  :CUSTOM_ID: common-lisp
  :END:

[[http://common-lisp.net/project/slime/][SLIME]] is the Superior Lisp Interaction Mode for Emacs, here're some [[http://www.cliki.net/SLIME%2520Features][features]]
and [[http://www.cliki.net/SLIME%2520Tips][tips]]. Believe me, SLIME in Emacs is a subversive developing environment for
Common Lisp, it is the ultimate solution for languages with a [[http://en.wikipedia.org/wiki/Read%25E2%2580%2593eval%25E2%2580%2593print_loop][REPL]]. SLIME is
the bridge between an Editor(here, Emacs for example, vim users have a [[http://www.vim.org/scripts/script.php?script_id%3D2531][slimv]]
which is a fork of SLIME to vim) and a running Common Lisp environment. It
makes your workflow so smooth and enjoyable that you will miss it so much when
working with other REPL languages such as Python/Ruby/JavaScript[1], etc.

Some good resources about SLIME:
- [[http://bc.tech.coop/blog/081209.html][Understanding SLIME (Using Emacs and Lisp Cooperatively)]], a really concise
  explanation of SLIME's architecture, together with lots of valuable links,
  from which you will understand why SLIME is so great and amazing.
- [[http://lisp-book.org/contents/chslime.pdf][Chapter 18. SLIME]] from [[http://lisp-book.org/contents/chslime.pdf][Lisp Outside the Box]] provides a really detailed guide
  to SLIME.
- [[http://common-lisp.net/project/slime/doc/html/][SLIME User Manual]] provides expert information and is your lifelong friend.
- For Chinese, [[http://www.feime.net/2013/%25E6%2596%25B0%25E5%25B9%25B4%25E7%25AC%25AC%25E4%25B8%2580%25E7%25AF%2587-%25E7%25BB%2599lisp%25E6%2596%25B0%25E6%2589%258B%25E4%25BB%258B%25E7%25BB%258D%25E4%25B8%258Bslime%25E8%25BF%2599%25E4%25B8%25AA%25E7%25A5%259E%25E5%2599%25A8/][Albertlee's Blog]] provides a detailed overview of SLIME.
- [[http://ghostopera.org/blog/2012/06/24/the-newbie-guide-to-common-lisp/][The Newbie Guide to Getting Started on Common Lisp]] provides a concise and
  helpful guide to start programming with Common Lisp.

To use SLIME, you must install an [[http://www.cliki.net/common%2520lisp%2520implementation][Lisp Implementation]], just like if you want to do
C programming, you must install a C compiler such as GCC. Here I recommend [[http://www.sbcl.org/][SBCL]]
for you. You can get it by =sudo apt-get install sbcl= in Ubuntu/Mint/Debian.

[[http://www.lispworks.com/][LispWorks]] provides a comprehensive documentation for Common Lisp called
[[http://www.lispworks.com/documentation/HyperSpec/Front/][hyperspec]], which integrates quite well with SLIME through
=slime-documentation-lookup=. You can get by =sudo apt-get install hyperspec=
in Ubuntu/Mint/Debian. To use hyperspec in ubuntu/mint, you can: =sudo apt-get
install hyperspec=, which also set proper =common-lisp-hyperspec-root= for
you. On other Linux distributions, maybe you need to set it manually to tell
SLIME where to find the hyperspec document.

You can also get [[http://en.wikipedia.org/wiki/Common_Lisp_the_Language][CLTL]] by =sudo apt-get install cltl=, which is the defacto
standard for Common Lisp before the ANSI standard.

Oh-my-emacs also configure [[http://emacs-w3m.namazu.org/][emacs-w3m]] as the default documentation browser for
SLIME.

Oh-my-emacs integrates [[https://github.com/purcell/ac-slime][ac-slime]] for instant in-buffer completion, and should be
self-adapted to your system, by which I mean, it will use an available lisp
implementation by finding it using =executable-find= instead of specifying a
fixed file path like =/usr/bin/sbcl=.

Enough stuff, enjoy your Common Lisp journey with Emacs and SLIME.

#+NAME: slime
#+BEGIN_SRC emacs-lisp
  (defun ome-common-lisp-slime-setup ()
    ;; Define multiple lisp backends
    ;; see http://nklein.com/2010/05/getting-started-with-clojureemacsslime/
    (defmacro defslime-start (name mapping)
      `(defun ,name ()
         (interactive)
         (let ((slime-default-lisp ,mapping))
           (slime))))
    (setq slime-lisp-implementations
          `((sbcl (,(executable-find "sbcl")) :coding-system utf-8-unix)
            (ccl (,(executable-find "ccl")))
            (ccl64 (,(executable-find "ccl64")))
            (clisp (,(executable-find "clisp")))))

    (defslime-start slime-sbcl 'sbcl)
    (defslime-start slime-ccl 'ccl)
    (defslime-start slime-ccl64 'ccl64)
    (defslime-start slime-clisp 'clisp)

    ;; If you use ubuntu/mint, then "sudo apt-get install hyperspec" will set
    ;; this for you in a file like "/etc/emacs/site-start.d/60hyperspec.el"
    ;; (setq common-lisp-hyperspec-root "/usr/share/doc/hyperspec/")

    ;; Open SBCL rc file in lisp-mode
    (add-to-list 'auto-mode-alist '("\\.sbclrc$" . lisp-mode))

    (global-set-key (kbd "C-c s") 'slime-selector)
    (setq slime-net-coding-system 'utf-8-unix)
    (setq slime-complete-symbol*-fancy t)
    (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
    (setq inferior-lisp-program
          (or (executable-find "sbcl")
              (executable-find "ccl")
              (executable-find "ccl64")
              (executable-find "clisp")))
    (slime-setup '(slime-fancy
                   slime-indentation
                   slime-banner
                   slime-highlight-edits)))

  (add-to-list 'el-get-sources
               '(:name slime
                       :after (progn
                                (ome-common-lisp-slime-setup))))

  (defun ome-ac-slime-setup ()
    (add-hook 'slime-mode-hook
              (lambda ()
                (set-up-slime-ac t)))     ; use slime-fuzzy-complete-symbol
    (add-hook 'slime-repl-mode-hook
              (lambda ()
                (set-up-slime-ac t)))
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'slime-repl-mode)))

  (add-to-list 'el-get-sources
               '(:name ac-slime
                       :after (progn
                                (ome-ac-slime-setup))))

#+END_SRC

* Clojure
  :PROPERTIES:
  :CUSTOM_ID: clojure
  :END:

[[http://www.clojure.org][Clojure]] is a modern Lisp on top of JVM, it is a member of the Lisp family of
languages. Clojure extends the code-as-data system beyond parenthesized lists
(s-expressions) to vectors and maps.

Since Clojure is a Lisp dialect, it should work the SLIME way. Yeah, first
comes [[https://github.com/technomancy/swank-clojure][swank-clojure]], then [[https://github.com/clojure-emacs/nrepl.el][nrepl.el]]. The only thing you need to install is
[[http://leiningen.org/][leiningen]] 2.x. I recommend you to install it manually, since not all [[https://github.com/technomancy/leiningen/wiki/Packaging][package
manager]] provides the latest version.

The general way to install lastest stable leiningen is:
#+BEGIN_SRC sh
wget -O /tmp/lein https://raw.github.com/technomancy/leiningen/stable/bin/lein
sudo mv /tmp/lein /usr/bin/lein
lein version
#+END_SRC

Or you can see leiningen's [[https://github.com/technomancy/leiningen/wiki/Upgrading][wiki]] for upgrading details.

Now, just open a clojure file, then =nrepl-jack-in=, and you can program
Clojure the SLIME way. [[http://vimeo.com/22798433][Here]] is an awesome live demo to demonstrate the Clojure
workflow.

It's really really awesome, ah?

#+NAME: clojure
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name clojure-mode))

  (defun ome-nrepl-setup ()
    (add-hook 'nrepl-interaction-mode-hook
              'nrepl-turn-on-eldoc-mode)
    (setq nrepl-hide-special-buffers t)
    (setq nrepl-buffer-name-separator "-")
    (setq nrepl-buffer-name-show-port t))

  (add-to-list 'el-get-sources
               '(:name nrepl
                       :after (progn
                                (ome-nrepl-setup))))

  (defun ome-ac-nrepl-setup ()
    (add-hook 'nrepl-mode-hook 'ac-nrepl-setup)
    (add-hook 'nrepl-interaction-mode-hook 'ac-nrepl-setup)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'nrepl-mode)))

  (add-to-list 'el-get-sources
               '(:name ac-nrepl
                       :after (progn
                                (ome-ac-nrepl-setup))))
#+END_SRC

* Scheme
  :PROPERTIES:
  :CUSTOM_ID: scheme
  :END:

[[http://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] is my favourite programming language, it is small, elegant and
powerful. Unfortunately, there're too many choices for scheme implementation,
which makes it a headache when you want to do some real world job with scheme.

Oh-my-emacs adopts [[http://www.nongnu.org/geiser/][geiser]], which provides a similar SLIME way to work with
scheme. To install geiser, you need install =automake= and =autoconf=. And to
run geiser, you need install at least one of the geiser supported scheme
implementation, namely, [[http://www.gnu.org/software/guile/][guile]] or [[http://racket-lang.org/][racket]].

There's a new experimental [[https://github.com/xiaohanyu/ac-geiser][ac-geiser]] project, written by me --- yeah, it's me,
I am the author, which provides a auto-complete backend for geiser. It is
still in beta version, however, and will be sent to el-get when stable.

#+NAME: geiser
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name geiser))

  (defun ome-ac-geiser-setup ()
    (add-hook 'geiser-mode-hook 'ac-geiser-setup)
    (add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'geiser-repl-mode)))

  (add-to-list 'el-get-sources
               '(:name ac-geiser
                       :after (progn
                                (ome-ac-geiser-setup))))

  ;; (add-to-list 'el-get-sources
  ;;              '(:name quack))
#+END_SRC

Actually, the official SLIME contrib has some swank backends for scheme
implementations, you can try it if you like. There's a [[https://github.com/nickg/swank-chicken][swank-chicken]] for
[[http://www.call-cc.org/][chicken scheme]], but it only provides a small part of SLIME features. So it is
disabled by default.

#+NAME: chicken
#+BEGIN_SRC emacs-lisp :tangle no
  (defun ome-swank-chicken-setup ()
    (setq swank-chicken-path "~/.emacs.d/el-get/swank-chicken/swank-chicken.scm")
    (add-hook 'scheme-mode-hook
              (lambda ()
                (slime-mode t))))

  (add-to-list 'el-get-sources
               '(:name swank-chicken
                       :after (progn
                                (ome-swank-chicken-setup))))
#+END_SRC

* Todos
** Elisp
- What is overlay?
- What is syntax?
- Learn more knowledge about emacs key-maps, and what's the difference between
  =global-set-key= and =remap=.
- Learn more knowledge about emacs syntax-table, functions like
  =modify-syntax-entry=, etc.
- What =enable-recursive-minibuffers= means to us?
- How to do asynchronous programming in emacs lisp?
- Make =ielm= as a real elisp =REPL=?

** Common Lisp
- Integrate [[http://www.foldr.org/~michaelw/emacs/redshank/][redshank]]?
- Find a method to rebase the source tree of various CL implementations, which
  is useful for =slime-edit-definition=.

** Scheme
- Write a package "ac-geisure", just like ac-slime.

** Clojure
- The boot up speed of JVM is too slow, so we may need to refer to
  http://icylisper.github.io/jark/.

* Footnotes
[1] [[https://github.com/swank-js/swank-js][swank-js]], [[http://common-lisp.net/~crhodes/swankr/][swankr]]
